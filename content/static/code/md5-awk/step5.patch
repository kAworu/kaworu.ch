--- step4.awk	2017-02-20 21:30:23.464046000 +0100
+++ step5.awk	2017-02-21 14:58:31.499103000 +0100
@@ -1,5 +1,6 @@
 BEGIN {
 	_ord_init();
+	_bitwise_init();
 	_md5_init();
 }
 
@@ -214,7 +215,7 @@
 }
 
 function bw_not(x) {
-	return mod32bits(compl(x));
+	return bw_xor(x, 4294967295); # 0xffffffff
 }
 
 function bw_lshift(x, n) {
@@ -225,16 +226,21 @@
 	return int(x / (2 ^ n));
 }
 
-function bw_and(x, y) {
-	return and(x, y);
+function bw_and(x, y,    i, r) {
+	for (i = 0; i < 32; i += 4) {
+		r = r / (2 ^ 4) + andlookup[x % 16, y % 16] * (2 ^ 28);
+		x = int(x / (2 ^ 4));
+		y = int(y / (2 ^ 4));
+	}
+	return r;
 }
 
 function bw_or(x, y) {
-	return or(x, y);
+	return bw_xor(bw_xor(x, y), bw_and(x, y));
 }
 
 function bw_xor(x, y) {
-	return xor(x, y);
+	return (x + y - 2 * bw_and(x, y));
 }
 
 # from https://www.gnu.org/software/gawk/manual/html_node/Ordinal-Functions.html
@@ -250,6 +256,21 @@
 	return _ord_[substr(s, 1, 1)];
 }
 
+function _bitwise_init(    a, b, x, y, i) {
+	# generate the lookup table for bw_and().
+	for (a = 0; a < 16; a++) {
+		for (b = 0; b < 16; b++) {
+			x = a;
+			y = b;
+			for (i = 0; i < 4; i++) {
+				andlookup[a, b] += ((x % 2) && (y % 2)) * (2 ^ i);
+				x = int(x / 2);
+				y = int(y / 2);
+			}
+		}
+	}
+}
+
 function _md5_init() {
 	# MD5 shift constants setup.
 	S11 =  7; S12 = 12; S13 = 17; S14 = 22;
