---
kind: article
navbar: Blog
title: "Strong crypt scheme with Dovecot, Postfixadmin and Roundcube"
created_at: 2016-04-20 19:31:37 +0200
updated_at: 2017-05-24 23:20:24 +0200
comments: true
tags: [sysadmin]
---

<div class="clearfix">
    <img class="no-border right" src="<%= static_url '/images/blowfish-birthday.png' %>" alt="blowfish">
    <p>
        Hi everyone, happy new year :)
    </p>
    <p>
        While
        <a href="http://www.dovecot.org/"><span class="brand">Dovecot</span></a>
        support a <em>lot</em> of different password schemes, making both
        <a href="http://postfixadmin.sourceforge.net/"><span class="brand">Postfixadmin</span></a>
        and
        <a href="https://roundcube.net/"><span class="brand">Roundcube</span></a>
        playing nice by using something else than the old MD5 scheme need a
        little work.
    </p>
    <p>
        In this post I'll explain how to configure them to use a
        <a href="https://en.wikipedia.org/wiki/Crypt_(C)#Blowfish-based_scheme">Blowfish scheme</a>
        (<strong>BLF-CRYPT</strong> in the <span class="brand">Dovecot</span> terminology),
        but you can easily adapt the steps to use something else. You should already have
        <span class="brand">Dovecot</span>, <span class="brand">Postfixadmin</span>, and
        <span class="brand">Roundcube</span> (with the password plugin) up and running.
    </p>
</div>

<!-- more -->

<h2>First of all</h2>
<p>
    Let me state the obvious: backup your configuration files, database,
    etc. before any changes.
</p>

<h2>Checking BLF-CRYPT support</h2>
<p>
    We need to check if the system support
    <strong>BLF-CRYPT</strong>. As stated in
    <a href="http://wiki2.dovecot.org/Tools/Doveadm/Pw">the documentation</a>:
    <strong>BLF-CRYPT</strong>, <strong>SHA256-CRYPT</strong>, and
    <strong>SHA512-CRYPT</strong> are optional and their availability depends
    on the system's libc.
</p>
```{"linenos":false}
% doveadm pw -s BLF-CRYPT -p secret
```
<p>
    If you get something like:
</p>
```{"linenos":false}
Fatal: Unknown scheme: BLF-CRYPT
```
<p>
    Then <strong>BLF-CRYPT</strong> is not available on your system. You can
    run <kbd>doveadm pw -l</kbd> to see the list of supported scheme, and pick
    the best one available. If you don't know how to choose,
    <a href="http://wiki2.dovecot.org/Authentication/PasswordSchemes#What_scheme_to_use.3F">the <span class="brand">Dovecot</span> documentation</a>
    is a good start.
</p>

<h2>Computing the ideal number of round</h2>
<p>
    The shorter the number of rounds, the faster a password hash is computed;
    the faster a password hash is computed, the faster is an attack trying many
    passwords (i.e. <a href="https://en.wikipedia.org/wiki/Brute-force_attack">Brute-force attack</a>).
    On the other hand, a high number rounds means it is harder to brute-force
    but also harder to compute for legitimate use (in this case users
    connecting to their emails). For a good read on the question check
    <a href="https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pkbdf2-sha256/3993#3993">Thomas Pornin's answer on stackexchange</a>.
</p>
<p>
    In this example we'll pick the least number of rounds taking more than
    250ms to compute a password hash (try different values for <code>-r</code>
    until happy):
</p>
```{"linenos":false}
% /usr/bin/time doveadm pw -s BLF-CRYPT -r 12 -p secret
{BLF-CRYPT}$2a$12$Y7ai9J06MhusOmJ0r/0nB.Aok4gts53SCDx/pZLN0FwjS09BBRWPa
        0.30 real         0.30 user         0.00 sys
```
<p class="codeblock-comment text-warning">
    <i class="glyphicon glyphicon-exclamation-sign"></i>
    Be sure to run theses commands on the same machine that will run the
    <span class="brand">Dovecot</span> server, the whole point is to find a
    minimum computation time when user actually login on the "production"
    server.
</p>

<h2><span class="brand">Postfixadmin</span> configuration</h2>
<p>
    Here is the relevant configuration part:
</p>
```{"title":"config.local.php","lang":"php"}
<?php
// ...
// Encrypt
// In what way do you want the passwords to be crypted?
// md5crypt = internal postfix admin md5
// md5 = md5 sum of the password
// system = whatever you have set as your PHP system default
// cleartext = clear text passwords (ouch!)
// mysql_encrypt = useful for PAM integration
// authlib = support for courier-authlib style passwords
// dovecot:CRYPT-METHOD = use dovecotpw -s 'CRYPT-METHOD'. Example: dovecot:CRAM-MD5
//   (WARNING: don't use dovecot:* methods that include the username in the
//   hash - you won't be able to login to PostfixAdmin in this case)
$CONF['encrypt'] = 'dovecot:BLF-CRYPT';

// If you use the dovecot encryption method: where is the dovecotpw binary located?
// for dovecot 1.x
// $CONF['dovecotpw'] = "/usr/sbin/dovecotpw";
// for dovecot 2.x (dovecot 2.0.0 - 2.0.7 is not supported!)
// $CONF['dovecotpw'] = "/usr/sbin/doveadm pw";
$CONF['dovecotpw'] = "/usr/local/bin/doveadm pw -r 12";
```
<div class="codeblock-comment alert alert-info">
    <ol>
        <li value="19">
            Don't forget to adapt the <code>-r</code> option value to the
            number of rounds found in the last step. Also check your doveadm
            executable path
            (<span class="path">/usr/local/bin/doveadm</span> in this
            example).
        </li>
    </ol>
</div>

<h2>Old password scheme backward compatibility</h2>
<p>
    Now in order to allow admin account to still login using the "old" password
    scheme (which is still the one used in your database at this point!), you
    need to figure out which one it is. First look at one of the password from
    the postfix database:
</p>
```{"lang":"sql","linenos":false}
SELECT password FROM admin LIMIT 1;
```

<p>
    Then check the
    <a href="https://en.wikipedia.org/wiki/Crypt_(C)#Key_Derivation_Functions_Supported_by_crypt">Key derivation Functions table</a>
    to find the corresponding scheme. For example, if your password look like
    <code>$1$etNnh7FA$OlM7eljE/B7F1J4XYNnk81</code> then it is using the MD5
    scheme.
</p>

<p>
    Once you know the old passwords scheme you need to find how
    <span class="brand">Dovecot</span> prefix it. The prefix should be easy to
    guess knowing the scheme name (for MD5 it is <strong>MD5-CRYPT</strong>),
    you can check by running
    <kbd>doveadm pw -s CRYPT-NAME-TO-TEST -p secret</kbd>
    and see if the result looks like the corresponding Wikipedia's example.
    Again, the full list of scheme supported by
    <span class="brand">Dovecot</span> <kbd>doveadm pw -l</kbd> may be helpful.
</p>

<p>
    Alright! Now we can prefix all the old password so they can still be used
    to log in:
</p>
```{"lang":"sql","linenos":false}
UPDATE admin   SET password = CONCAT('{MD5-CRYPT}', password);
UPDATE mailbox SET password = CONCAT('{MD5-CRYPT}', password);
```

<h2><span class="brand">Postfixadmin</span> checkup</h2>
<p>
    Here is a (non-exhaustive) list of steps to check that the new
    configuration work as expected:
</p>
<ol>
    <li>
        <p>
            Login using a <span class="brand">Postfixadmin</span> admin account,
            it should work and still use the "old" password scheme.
        </p>
    </li>
    <li>
        <p>
            Once logged in, change your password. Once updated, check that your
            new password has been hashed using the new password scheme:
        </p>
```{"lang":"sql","linenos":false}
SELECT password FROM admin ORDER BY modified DESC LIMIT 1;
```
    </li>
    <li>
        <p>
            Logout and login again, it should work now using the new password
            scheme.
        </p>
    </li>
    <li>
        <p>
            Create a new mailbox and check that its password has been hashed
            using the new password scheme:
        </p>
```{"lang":"sql","linenos":false}
SELECT password FROM mailbox ORDER BY modified DESC LIMIT 1;
```
    </li>
</ol>

<h2><span class="brand">Roundcube</span> password plugin configuration</h2>
<p>
    Here is the relevant configuration part:
</p>
```{"title":"plugins/password/config.inc.php","lang":"php"}
<?php

// Password Plugin options
// -----------------------
// ...
// force saving when the new password is the same as the current password, so
// that it uses the latest configured password scheme.
$rcmail_config['password_force_save'] = true;
// ...

// SQL Driver options
// ------------------
// ...
// The SQL query used to change the password.
// The query can contain the following macros that will be expanded as follows:
//      %p is replaced with the plaintext new password
//      %c is replaced with the crypt version of the new password, MD5 if available
//         otherwise DES.
//      %D is replaced with the dovecotpw-crypted version of the new password
//      %o is replaced with the password before the change
//      %n is replaced with the hashed version of the new password
//      %q is replaced with the hashed password before the change
//      %h is replaced with the imap host (from the session info)
//      %u is replaced with the username (from the session info)
//      %l is replaced with the local part of the username
//         (in case the username is an email address)
//      %d is replaced with the domain part of the username
//         (in case the username is an email address)
// Escaping of macros is handled by this module.
// Default: "SELECT update_passwd(%c, %u)"
$rcmail_config['password_query'] = "UPDATE mailbox SET password = %D, modified = NOW() WHERE username = %u";

// By default domains in variables are using unicode.
// Enable this option to use punycoded names
$rcmail_config['password_idn_ascii'] = false;

// Path for dovecotpw (if not in $PATH)
$rcmail_config['password_dovecotpw'] = '/usr/local/bin/doveadm pw -r 12';

// Dovecot method (dovecotpw -s 'method')
$rcmail_config['password_dovecotpw_method'] = 'BLF-CRYPT';

// Enables use of password with crypt method prefix in %D, e.g. {MD5}$1$LUiMYWqx$fEkg/ggr/L6Mb2X7be4i1/
$rcmail_config['password_dovecotpw_with_method'] = true;
```
<div class="codeblock-comment alert alert-info">
    <ol>
        <li value="31">
            YMMV regarding the <code>password_query</code> but the important
            part is to use <code>%D</code> as it is the dovecotpw-crypted
            version.
        </li>
        <li value="38">
            Don't forget to adapt the <code>-r</code> option value to the
            number of rounds found in the last step. Also check your doveadm
            executable path
            (<span class="path">/usr/local/bin/doveadm</span> in this
            example).
        </li>
        <li value="44">
            We use crypt method prefix in <code>%D</code> to be consistent with
            <span class="brand">Postfixadmin</span>.
        </li>
    </ol>
</div>

<h2><span class="brand">Roundcube</span> checkup</h2>
<p>
    Here is a (non-exhaustive) list of steps to check that the new
    configuration work as expected:
</p>
<ol>
    <li>
        <p>
            Login from <span class="brand">Roundcube</span> with your usual
            access. It should work and still use the "old" password scheme.
        </p>
    </li>
    <li>
        <p>
            Once logged in, change your password. Once updated, check that your
            new password has been hashed using the new password scheme:
        </p>
```{"lang":"sql","linenos":false}
SELECT password FROM mailbox ORDER BY modified DESC LIMIT 1;
```
    </li>
    <li>
        <p>
            Logout and login again, it should work now using the new password
            scheme.
        </p>
    </li>
</ol>

<h2>Automatic password scheme migration</h2>
<p>
    <span class="brand">Dovecot</span> has a facility to run
    <a href="https://wiki2.dovecot.org/PostLoginScripting">post-login script</a>
    which can be used to
    <a href="https://wiki2.dovecot.org/HowTo/ConvertPasswordSchemes">migrate mailbox password</a>
    to our freshly configured scheme.
</p>

<h3>Dovecot config</h3>
<p>
    First, the <code>password_query</code> of
    <span class="filename">dovecot-sql.conf.ext</span> must be adapted to setup
    the plaintext password in the <span class="brand">Dovecot</span>
    environment. This is what we need to add to the <code>SELECT</code> query:
</p>

```{"lang":"sql","linenos":false}
'%w' AS userdb_plain_pass
```

<p>
  For example, this is what my <code>password_query</code> looked like before:
</p>

```{"lang":"sql","linenos":false}
password_query = SELECT password, CONCAT('/home/vmail/', maildir) AS userdb_home, '5000' AS userdb_uid, '5000' AS userdb_gid, concat('*:bytes=', quota) AS userdb_quota_rule FROM mailbox WHERE username = '%u' AND domain = '%d' AND active
```

<p>
  And now:
</p>

```{"lang":"sql","linenos":false}
password_query = SELECT password, '%w' AS userdb_plain_pass, CONCAT('/home/vmail/', maildir) AS userdb_home, '5000' AS userdb_uid, '5000' AS userdb_gid, concat('*:bytes=', quota) AS userdb_quota_rule FROM mailbox WHERE username = '%u' AND domain = '%d' AND active
```

<p>
  Then, make sure you have configured "userdb prefetch" correctly. In your
  <span class="brand">Dovecot</span> configuration, look for:
</p>

```{"lang":"config","linenos":false}
# "prefetch" user database means that the passdb already provided the
# needed information and there's no need to do a separate userdb lookup.
# <doc/wiki/UserDatabase.Prefetch.txt>
userdb {
  driver = prefetch
}
```

<p>
  Finally, in order to have our script run on pop3 and imap login, we need to
  adapt both <code>service imap</code> and <code>service pop3</code>. Here is
  the diff of my configuration but of course YMMV:
</p>

```{"lang":"diff"}
--- usr/local/etc/dovecot/conf.d/10-master.conf 2014-10-27 22:09:44.000000000 +0100
+++ /usr/local/etc/dovecot/conf.d/10-master.conf        2017-05-24 19:40:19.000353000 +0200
@@ -67,6 +67,8 @@
 }

 service imap {
+  # see https://wiki2.dovecot.org/HowTo/ConvertPasswordSchemes
+  executable = imap imap-postlogin
   # Most of the memory goes to mmap()ing files. You may need to increase this
   # limit if you have huge mailboxes.
   #vsz_limit = $default_vsz_limit
@@ -76,6 +78,8 @@
 }

 service pop3 {
+  # see https://wiki2.dovecot.org/HowTo/ConvertPasswordSchemes
+  executable = pop3 pop3-postlogin
   # Max. number of POP3 processes (connections)
   #process_limit = 1024
 }
@@ -131,3 +135,19 @@
     #group =
   }
 }
+
+# see https://wiki2.dovecot.org/HowTo/ConvertPasswordSchemes
+service imap-postlogin {
+  executable = script-login /usr/local/etc/dovecot/postlogin-updatepw.php
+  user = $default_internal_user
+  unix_listener imap-postlogin {
+  }
+}
+
+# see https://wiki2.dovecot.org/HowTo/ConvertPasswordSchemes
+service pop3-postlogin {
+  executable = script-login /usr/local/etc/dovecot/postlogin-updatepw.php
+  user = $default_internal_user
+  unix_listener pop3-postlogin {
+  }
+}
```
<p class="codeblock-comment alert alert-info">
  Remember the configured script-login path on line 28 and 36, we'll use it
  right after.
</p>


<h3>password scheme update script</h3>
<p>
    Now we'll write the post-login script that will update the mailbox password
    to the new scheme. I've chosen to write my own for several reasons I will
    outline later.
</p>

<p>
  Let's start by creating the file directly with the right permissions. It is
  important because the script will contain the credentials to connect to our
  mailbox database.
</p>

```{"linenos":false}
# /usr/bin/install -m 750 -g dovecot -o root /dev/null /usr/local/etc/dovecot/postlogin-updatepw.php
```

<p>
  I've set the group to <code>dovecot</code> here because it match my
  configured <code>$default_internal_user</code> but adapt if needed. If the
  permissions mismatch, you'll get some "Permission denied" messages in your
  maillog looking like this:
</p>

```{"linenos":false}
blablabla dovecot: imap-postlogin: Error: script-login(blowfish@kaworu.ch): Fatal: execvp(/usr/local/etc/dovecot/postlogin-updatepw.php) failed: Permission denied
blablabla dovecot: imap(blowfish@kaworu.ch): Post-login script denied access to user blowfish@kaworu.ch
blablabla dovecot: imap-postlogin: Fatal: master: service(imap-postlogin): child 42 returned error 84 (exec() failed)
```

<p>
  The real issue though is that the <em>login will fail</em>, so take extra
  care.
</p>


<p>
  Here is the full script. It has been written in PHP because since you have
  <span class="brand">Postfixadmin</span> and
  <span class="brand">Roundcube</span> installed you probably have PHP too :)
</p>

<p class="alert alert-warning">
  <i class="glyphicon glyphicon-exclamation-sign"></i>
  <a href="https://secure.php.net/manual/en/book.pcntl.php">
    The pcntl shared extension for PHP
  </a> is required to run this script. It also need PDO (and your database PDO
  driver) but <span class="brand">Roundcube</span> uses PDO, so it should
  be safe to assume that it is installed (and working).
</p>

<div id="postlogin-updatepw-code">
  <%= include_code 'strong-crypt-scheme-with-dovecot-postfixadmin-and-roundcube/postlogin-updatepw.php', title: '/usr/local/etc/dovecot/postlogin-updatepw.php', lang: 'php' %>
  <p class="codeblock-comment alert alert-info">
    Lines 3 through 10 are meant to be adapted, most of them from the
    <span class="brand">Roundcube</span> password plugin configuration. Also,
    depending on your database schema, the SQL queries on lines 31 and 81 may
    need to be changed too.
  </p>
</div>

<p>
  This script has several advantages over the example(s) you can find from the
  <span class="brand">Dovecot</span> wiki:
</p>
<ul>
  <li>
    It uses exclusively syslog's <code>LOG_MAIL</code> for messages, so its
    output is handily around the <span class="brand">Dovecot</span> logs. You
    might care or not.
  </li>
  <li>
    It is not limited to <span class="brand">MySQL</span> as I am using
    <span class="brand">PostgreSQL</span>. Again, not a big deal.
  </li>
  <li>
    It only compute the new password scheme when the password actualy need to
    be updated. This is relevant as we specifically picked a number of round
    that would be costly.
  </li>
  <li>
    It uses <span class="manpage">doveadm(1)</span> in a way that doesn't leak
    the password on the command line. <em>This is critical</em>, when you call
    <kbd>doveadm pw -p secret</kbd> <code>secret</code> (the
    plaintext password) is part of the cmdline that can be seen from other
    processes (e.g. when running <kbd>ps a</kbd>).
  </li>
</ul>

<h3>Testing the password migration</h3>

<p>
  Reload Dovecot's configuration:
</p>

```{"linenos":false}
# service dovecot reload
```

<p>
  Now when a user with a mailbox using the old password scheme login (through
  imap for example), you should see something like this in your maillog:
<p>

```{"linenos":false}
blablabla dovecot: imap-login: Login: user=<blowfish@kaworu.ch>, method=PLAIN, rip=2a01:4f8:120:5388::1, lip=2a01:4f8:120:5388::1, ...
blablabla postlogin-updatepw.php[666]: blowfish@kaworu.ch password successfully migrated to BLF-CRYPT.
```

<p>
  Then if you check in the database, its password scheme should have been
  updated to <code>BLF-CRYPT</code>. The next logins from this user should
  generate messages like this:
<p>

```{"linenos":false}
blablabla dovecot: imap-login: Login: user=<blowfish@kaworu.ch>, method=PLAIN, rip=2a01:4f8:120:5388::1, lip=2a01:4f8:120:5388::1, ...
blablabla postlogin-updatepw.php[667]: blowfish@kaworu.ch already use BLF-CRYPT, skipping.
```

<h2>The End.</h2>
<p>
  And voilà! Now only the <span class="brand">Postfixadmin</span> account
  passwords needs to be updated, but it should be not too much trouble to force
  them to update their password :)
</p>
<p>
  Many thanks to <em>Aki Tuomi</em> for pointing out the
  <span class="brand">Dovecot</span> wiki documentation about the password
  scheme migration. It prompted me to test it and complete this article.
</p>
