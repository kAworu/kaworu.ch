---
kind: article
navbar: Blog
title: "Happy 2018"
created_at: 2018-06-04 09:32:21 +0200
comments: true
tags: [programming, C, Swift]
---

<div class="clearfix">
    <img class="left" src="<%= static_url '/images/aoc2017.png' %>" alt="Advent Of Code 2017">
    <p>
        Finally found some time to write something, it's been a while.
        Programming (and blogging) on my free time has been relegated to the
        background theses months, partly because I'm busy playing hide-and-seek
        and also because I've become found of painting and drawing (by the way
        I highly recommend
        <a href="https://drawabox.com/" title="draw a box website">drawabox</a>).
        Still, here are the few things I've been exploring.
    </p>

    <p>
        I completed the 2017 edition of
        <a href="https://adventofcode.com/" title="Advent of Code">Advent of Code</a>
        in <span class="brand">Swift</span> and it was a blast. I picked
        <span class="brand">Swift</span> because I wanted to learn something
        new (also "mobile" is a thing now â€” or so I've read on the internet).
        It was easy to setup and run on Linux and has what you would expect of
        a "modern" programming language (clean syntax, optionals, package
        manager etc.).  The killing feature though is the
        <a
          href="https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID46"
          title="Custom Operator from the swift book">
             custom operators
        </a> allowing you to define new operators including their
        associativity, precedence, and using fun Unicode characters. Compared
        to <span class="brand">Rust</span> I feel like
        <span class="brand">Swift</span> has a much, much smoother learning
        curve. On the other hand, learning <span class="brand">Swift</span> has
        not changed the way I see programming the way learning
        <span class="brand">Rust</span> has. You can find my puzzles and
        solutions
        <a href="https://github.com/kAworu/adventofcode-2017" title="Advent of Code 2017 puzzles and solutions in Swift">here</a>.
    </p>

    <p>
        I started <a href="https://craftinginterpreters.com/" title="a handbook for making programming languages">
          Crafting Interpreters
        </a> because of how fun it is to write compilers. And the book is
        incredible. It's a pure engineered labour of love. I can't imagine how
        many hours of dedicated work it has been (and continue to be) for its
        author, Bob Nystrom. I plan to use
        <span class="brand">Swift</span> and <span class="brand">Rust</span>
        instead of <span class="brand">Java</span> and
        <span class="brand">C</span>, you can take a look at my attempt
        <a href="https://github.com/kAworu/lox" title="Just me going through Crafting Interpreters">here</a>.
    </p>

    <p>
        Finally, I recently discovered
        <a href="https://cryptopals.com/" title="the cryptopals crypto challenges">
          the cryptopals crypto challenges
        </a> (also known as The Matasano Crypto Challenges). Write "real"
        crypto code then break real crypto code, what's not to love about it?
        Not for the faint of heart, but definitely an enlightening journey. Code at
        <a href="https://github.com/kAworu/cryptopals" title="Just me going tough the cryptopals challenges">
          GitHub
        </a> as usual.
    </p>

    <p>
        That's it for now, happy coding :)
    </p>
</div>
