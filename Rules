#!/usr/bin/env ruby
require 'time'
require 'compass'

Compass.add_project_configuration 'compass_config.rb'

preprocess do
  # Link the all the given items in order in a doubly linked list.
  #
  # The previous and next item identifier are stored in item[:navigation_prev]
  # and item[:navigation_next] respectively.
  #
  # see navigation_prev() and navigation_next()
  def setup_previous_next_nav(items)
    first, last = 0, (items.length - 1)
    items.each_with_index do |item, i|
      item[:navigation_prev] = items[i - 1].identifier if i > first
      item[:navigation_next] = items[i + 1].identifier if i < last
    end
  end

  # setup some items for tags pages
  def generate_tag_pages_items
    # build a Hash like {'tagname' => [article1, article0], ...}
    sorted_articles.inject Hash.new do |injected, article|
      article_tags = article[:tags] || Array.new
      article_tags.each { |tag| (injected[tag] ||= Array.new) << article }
      injected
    end.each do |tag, articles|
      @items.create(
        "<%= render '/_blog_archives.erb', articles: @item[:article_ids].map { |id| @items[id] } %>",
        {
          navbar: 'Archives',
          title: "Tag: #{tag}",
          kind: 'tag-archive',
          tag: tag,
          article_ids: articles.map(&:identifier)
        },
        "/blog/tags/#{tag}.erb" # FIXME: slugize ?
      )
    end
  end

  # inspired by http://nanoc.ws/docs/guides/paginating-articles/
  def generate_blog_pages_items
    slices = sorted_articles.each_slice(@config[:paginate])
    slices.each_with_index do |subarticles, i|
      @items.create(
        "<%= render '/_blog_page.erb', articles: @item[:article_ids].map { |id| @items[id] } %>",
        {
          navbar: 'Blog',
          kind: 'blog-page',
          no_page_header: true,
          article_ids: subarticles.map(&:identifier),
        },
        if i.zero? then "/index.erb" else "/blog/page/#{i + 1}.erb" end
      )
    end
  end

  generate_tag_pages_items
  generate_blog_pages_items
  setup_previous_next_nav sorted_articles.reverse
  setup_previous_next_nav blog_pages.reverse
end

layout '/**/*.erb', :erb

# favicon
passthrough '/favicon.*'

# some exceptional files
%w[/sitemap.xml /robots.txt /humans.txt /atom.xml].each do |f|
  compile "#{f}.erb" do
    filter :erb
  end
end

# stylesheets
ignore '/style/**/_*' # partials
# /style/foo.scss → /style/foo.css
compile '/style/**/*.scss' do
  filter :sass, Compass.sass_engine_options
  filter :relativize_paths, :type => :css
  write @item.identifier.without_ext + '.css'
end

# blog articles
# /blog/articles/foo.html → /blog/1970/01/01/foo/index.html
compile '/blog/articles/**/*.erb' do
  filter :erb
  filter :octohl
  layout '/article.erb'
  layout '/default.erb'
  t = attribute_to_time(@item[:created_at]).strftime('%Y/%m/%d')
  name = File.basename @item.identifier.without_ext
  write "/blog/#{t}/#{name}/index.html"
end

# site pages
compile '/**/*.erb' do
  filter :erb
  filter :octohl
  layout '/page.erb'
  layout '/default.erb'
end
# /foo/bar/index.erb → /foo/bar/index.html
route '/**/index.erb' do
  @item.identifier.without_ext + ".html"
end
# /foo/bar/oni.erb → /foo/bar/oni/index.html
# + special cases handling for item having a path attribute set.
route '/**/*.erb' do
  @item[:path] or @item.identifier.without_ext + '/index.html'
end

# static stuff
# /static/foo.bar → /foo.bar
compile '/static/**/*' do
  write @item.identifier.to_s.sub(/\A\/static/, '')
end
